#!/bin/bash

# g - shorthand for git
g () {
  git "$@"
}

# copy the contents of file $1 to X clipboard
fcopy () {
  [ ! -f "$1" ] \
    && echo "$(tput setaf 1)$1 is not a valid file" \
    && return 1
  if grep -q Microsoft /proc/version &> /dev/null; then
    cat "$1" | clip.exe
  elif [[ "$(uname)" == "Darwin" ]]; then
    pbcopy < "$1"
  else
    xclip -sel clip < "$1"
  fi
  echo "$(tput setaf 2)copied contents of $1 to clipboard"
}

# run a task and notify me of its status on completion
notify () {
  [[ -z "${@// }" ]] \
    && echo "$(tput setaf 1)no command specified" \
    && return 1
  "$@" \
    && pb push -d 1 <<< ""$@": succeeded!" \
    || pb push -d 1 <<< ""$@": failed :("
}

# TODO add pushbullet SMS function

# Add an alias for a remote host and generate + copy an SSH key
addhost () {
  echo -n "Enter host alias: " && read host
  while [ -z "$host" ]; do
    echo "$(tput setaf 1)Host alias required.$(tput sgr 0)" \
      && echo -n "Enter host alias: " && read host
  done

  echo -n "Enter hostname: " && read hostname
  while [ -z "$hostname" ]; do
    echo "$(tput setaf 1)Hostname required.$(tput sgr 0)" \
      && echo -n "Enter hostname: " && read hostname
  done

  echo -n "Enter username: " && read user
  while [ -z "$user" ]; do
    echo "$(tput setaf 1)Username required.$(tput sgr 0)" \
      && echo -n "Enter username: " && read user
  done

  echo -n "Enter port (enter to ignore): " && read port

  echo -n "Enter SSH key filename (~/.ssh/${host}_id_rsa): " && read keyfile
  keyfile=${keyfile:-~/.ssh/${host}_id_rsa}

  ssh-keygen -t rsa -f "$keyfile"

  echo "$(tput setaf 2)Copying SSH key to remote host...$(tput sgr 0)"
  ssh-copy-id -i "$keyfile" "$user@$hostname" -p "${port:-22}"
  echo "$(tput setaf 2)Done"

  echo "$(tput setaf 2)Adding host configuration to ~/.ssh/config...$(tput sgr 0)"
  echo "Host $host" >> ~/.ssh/config
  echo "  Hostname $hostname" >> ~/.ssh/config
  echo "  User $user" >> ~/.ssh/config
  [ -n "$port" ] && echo "  Port $port" >> ~/.ssh/config
  echo "  IdentityFile $keyfile" >> ~/.ssh/config
  echo "  PreferredAuthentications publickey" >> ~/.ssh/config
  echo "  ForwardAgent yes" >> ~/.ssh/config
  echo "$(tput setaf 2)Done$(tput sgr 0)"
}

# TODO: remove a host config from ~/.ssh/config
#   also remove whatever its identityfile is, or move it to
#   ~/.ssh/.archive or something
rmhost () {
  [ -z "$1" ] \
    && echo "$(tput setaf 1)Need host alias to remove" \
    && return 1
  ! grep -q "Host $1" ~/.ssh/config \
    && echo "$(tput setaf 1)Host alias not found" \
    && return 1
}

# TODO: if I archive in rmhost, make archived configs restorable

# Output the contents of a .reg file to set terminal colors in Windows
wincolors () {
  echo "Windows Registry Editor Version 5.00"
  echo "; Automatically generated from meat/core/p13n/colors"
  echo ""
  echo "[HKEY_CURRENT_USER\Console]"
  local i=0
  while read color; do
    printf "\"ColorTable%02d\"=dword:00" $i
    echo "${color:5:2}${color:3:2}${color:1:2}"
    (( i++ ))
  done < ~/.files/meat/core/p13n/colors
  echo "\"ScreenColors\"=dword:00000007"
}

# Remove all symlinks from a directory (default: cwd)
rmlinks () {
  local dir=${1:-$(pwd)}
  local links=$(find $dir -maxdepth 1 -type l)
  [ -z "$links" ] \
    && echo "$(tput setaf 1)no symlinks found in $dir$(tput sgr 0)" \
    && return 1
  echo "$links"
  echo -n "are you sure you want to remove these symlinks? [yY] " && read confirm
  [[ $confirm =~ [yY] ]] \
    && rm $links \
    && echo "$(tput setaf 2)removed symlinks$(tput sgr 0)" \
    || echo "$(tput setaf 1)exiting$(tput sgr 0)"
}

# enable 32-bit executables on WSL
winbin () {
  if grep -q Microsoft /proc/version &> /dev/null; then
    sudo service binfmt-support start
  fi
}

# generate terminal color/font scheme and set it
scheme () {
  scheme=${1:-pur}
  font=${2:-inputmono}
  [ -d "$HOME/.files/meat/core/p13n/bin" ] || mkdir "$HOME/.files/meat/core/p13n/bin"
  zenbu \
    -f "$HOME/.files/meat/core/p13n/filters.py" \
    -t "$HOME/.files/meat/core/p13n/templates/" \
    -d "$HOME/.files/meat/core/p13n/bin/" \
    "$HOME/.files/meat/core/p13n/colors/$scheme.yaml" \
    "$HOME/.files/meat/core/p13n/fonts/$font.yaml"
  if grep -q Microsoft /proc/version &> /dev/null; then
    regedit.exe "$HOME/.files/meat/core/p13n/bin/win.reg"
  elif [[ "$(uname)" == "Darwin" ]]; then
    # [ -f ~/Library/Preferences/com.googlecode.iterm2.plist ] \
    #   && rm ~/Library/Preferences/com.googlecode.iterm2.plist
    # cp "$HOME/.files/meat/core/p13n/bin/com.googlecode.iterm2.plist" ~/Library/Preferences
    # # defaults import com.googlecode.iterm2 "$HOME/.files/meat/core/p13n/bin/mac.plist"
    # defaults read -app iTerm
    :
  else
    . "$HOME/.files/meat/core/p13n/bin/gnome.sh"
  fi
  . "$HOME/.files/meat/core/p13n/bin/colors.sh"
}
